import json
import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, Router, types , F 
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart , Command
from aiogram.types import Message , CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup , InlineKeyboardMarkup , InlineKeyboardButton 
import buttons 
from states1 import Crypt
from states1 import Kurschange
from states1 import Sellusdts
group_id =-4180547434
TOKEN ="Emirlan Ysmanov"

# All handlers should be attached to the Router (or Dispatcher)
bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()



# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
with open('kurs.json') as json_file:
    data = json.load(json_file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_data(data):
    with open('kurs.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)

def load_data():
    with open('kurs.json') as json_file:
        return json.load(json_file)
    


# Command start
@dp.message(Command("start"))
async def start(message: Message):
    if message.chat.type == 'private':
        data = load_data()
        buy_rate = data['BUY_RATE']
        sell_rate = data['SELL_RATE']
        await message.answer(f"""–ü—Ä–∏–≤–µ—Çüôå <b>{message.from_user.first_name}</b>!\n–ü–æ–∫—É–ø–∞–µ–º –∏ –ø—Ä–æ–¥–∞–µ–º USDT (–¢–µ–∑–µ—Ä), –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–º—É –∫—É—Ä—Å—É
–ü–æ–∫—É–ø–∫–∞ USDT –ø–æ <b><i>{buy_rate}</i></b>
–ü—Ä–æ–¥–∞–∂–∞ USDT –ø–æ <b><i>{sell_rate}</i></b>
–î—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–º—É –∫—É—Ä—Å—É, –∑–∞—Ä–∞–Ω–µ–µ –æ–±–≥–æ–≤–æ—Ä–∏–≤ –≤ –õ–°.
üë®‚Äçüíª–†–∞–±–æ—Ç–∞–µ–º 24/7
üë®‚Äçüíª–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @P2P_succsess""",parse_mode="HTML",reply_markup=buttons.magaz_kb)
    else:
        return 

# Command menu 
@dp.message(Command("menu"))
async def menu(message: Message):
    await message.answer("<b>Menu</b>",reply_markup=buttons.magaz_kb,parse_mode="HTML")
        





#–ö–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –î–ª—è U1uk baike
@dp.message(F.text.lower() == '–≤')
async def changevaluta(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –ü–æ–∫—É–ø–∫–∏ USDT")
    await state.set_state(Kurschange.Buy)
#get BUYRATE
@dp.message(Kurschange.Buy)
async def getbuyrate(message: Message , state: FSMContext):
    BY = float(message.text)
    data = load_data()
    data['BUY_RATE'] = BY
    save_data(data)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –ü—Ä–æ–¥–∞–∂–∏ USDT")
    await state.set_state(Kurschange.Sell)
#get SELL_RATE
@dp.message(Kurschange.Sell)
async def getsellrate(message: Message, state: FSMContext):
    SY = float(message.text)
    data = load_data()
    data['SELL_RATE'] = SY
    save_data(data)
    await state.clear()
    await message.answer("–ö—É—Ä—Å USDT –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω‚úÖ   ")

    



      

#–û—Å–Ω–æ–≤–Ω—ã–µ callbacks –±–æ—Ç–∞ /////////////////////////////////////////////////////////////////////////////////
#–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –≤ —Ç–æ–º —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ callbackquery —Å @dp –∏ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å @router.message –∞ –Ω–∞–¥–æ —Å –∫–∞–∫–æ–π –Ω–∞—á–∞–ª —Å —Ç–∞–∫–æ–π –∏ –∑–∞–∫–æ–Ω—á–∏–ª –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è , –∫—Ä—á –∏ —Ç–∞–º –∏ —Ç–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π [handler]
@dp.callback_query(lambda callback_query: callback_query.data == "busdt")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
        await calback.message.answer("""<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –æ–ø–ª–∞—Ç—ã!</b>""",parse_mode="HTML",reply_markup=buttons.paycards)


#–†–µ–∫–≤–∏–∑–∏—Ç—ã callback 
@dp.callback_query(lambda callback_query: callback_query.data == "requisites")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("""–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:

–ë–∞–Ω–∫: MBANK
–†–µ–∫–≤–∏–∑–∏—Ç—ã: `UlukBa1ke`
""",parse_mode="MarkdownV2",reply_markup=buttons.finishpay)

#–Ø –æ–ø–ª–∞—Ç–∏–ª callback 
@dp.callback_query(lambda callback_query: callback_query.data == "fnpay")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –ü–ª–∞—Ç—ë–∂–∞!
‚ùóÔ∏è–í —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å!
""")
    await state.set_state(Crypt.screen)
    
#–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
@dp.callback_query(lambda callback_query: callback_query.data == "bcktomenu")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",reply_markup=buttons.magaz_kb,parse_mode="HTML")

#–ú–±–∞–Ω–∫ –ø–æ–∫—É–ø–∫–∞     
@dp.callback_query(lambda callback_query: callback_query.data == "mbankcardbuy")
async def cardmbank(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("""<i><b>–í–≤–µ–¥–∏—Ç–µ –§–ò–û - MBANK</b></i>
‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è
–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å MBANK –Ω–∞ MBANK!
‚ùóÔ∏è–ï—Å–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–æ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï –ü–û–°–¢–£–ü–Ø–¢ –Ω–∞ –≤–∞—à —Å—á—ë—Ç!
""",parse_mode="HTML")
    await state.set_state(Crypt.Fio)
# Getting trc adress
@dp.message(Crypt.Fio)
async def getfiobuy(message: Message , state: FSMContext):
    await state.update_data(Fio=message.text)
    await state.set_state(Crypt.trc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å USDT TRC20",parse_mode="HTML",reply_markup=buttons.instructiontrc)

# Getting sum of replenishment 
@dp.message(Crypt.trc)
async def gettrcbuy(message: Message,state: FSMContext):
    data1 = load_data()
    buy_rate = data1['BUY_RATE']
    sell_rate = data1['SELL_RATE']
    await state.update_data(trc=message.text)
    await state.set_state(Crypt.sum)
    await message.answer(f"""–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è KGS. \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: <strong>200</strong> | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <strong>1 000 000</strong>
<blockquote>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ USDT <b>{buy_rate}</b></blockquote>""",parse_mode="HTML")


# checking if it right ? 
@dp.message(Crypt.sum)
async def getsumbuy(message: Message, state:FSMContext):
    data1 = load_data()
    buy_rate = data1['BUY_RATE']
    sell_rate = data1['SELL_RATE']
    amount = message.text
    if amount.isdigit():
        if amount[0]=="0":
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")
        elif int(amount) >= 200 and int(amount) <=1000000:
            await state.update_data(sum=message.text)
            data = await state.get_data()
            await state.set_state(Crypt.screen)
            newtrc = float(data['sum']) / buy_rate
            await message.answer(f"""–í—ã —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:{data["sum"]}\n–¢–æ –µ—Å—Ç—å –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ usdt - {newtrc} """)
            await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {data['sum']} –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º",reply_markup=buttons.requisites)
        else: 
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")
    else: 
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!")

# Final message to user and sending all data`s to group 
@dp.message(Crypt.screen , F.photo)
async def getscreen(message: Message , state: FSMContext):
    screen_id = message.photo[-1].file_id
    data = await state.get_data()
    await state.clear()
    await message.answer(f"""‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!

üÜî–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT TRC20: {data["trc"]}
üíµ–°—É–º–º–∞: {data["sum"]}

‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 10 –º–∏–Ω—É—Ç.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!

‚úÖ–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã üëá
üë®‚Äçüíª–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @P2P_succsess
""",reply_markup=buttons.backtomainmenu)
    await bot.send_photo(
    chat_id=group_id, 
    photo=screen_id, 
    caption=f"""<b>–§–ò–û</b>-{data["Fio"]}
<b>–ê–¥—Ä–µ—Å TRC</b> - {data["trc"]}
<b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b> - {data['sum']}""",
    parse_mode="HTML",
    message_thread_id=None 
)
#–ù–∞—á–∞–ª–æ –ø—Ä–æ–¥–∞–∂—ã –°–í–û–ò–• USDT 
@dp.callback_query(lambda callback_query: callback_query.data == "susdt")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –ø—Ä–∏–µ–º–∞ –æ–ø–ª–∞—Ç—ã!",reply_markup=buttons.sellcards)
# asking for mbank number
@dp.callback_query(lambda callback_query: callback_query.data == "mbankcardsell")
async def allcalbacks(calback: CallbackQuery, state: FSMContext):
    await calback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ú–ë–ê–ù–ö–ê")
    await state.set_state(Sellusdts.mbanknum)
# here finally getting mbank num 
@dp.message(Sellusdts.mbanknum)
async def getmbanknumsell(message: Message, state: FSMContext):
    data1 = load_data()
    buy_rate = data1['BUY_RATE']
    sell_rate = data1['SELL_RATE']
    await state.update_data(mbanknum=message.text)
    await state.set_state(Sellusdts.screensell)
    data2 = await state.get_data()
    await message.answer(f"""‚úÖ–í–∞—à –Ω–æ–º–µ—Ä –ú–ë–ê–ù–ö–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <code>{data2["mbanknum"]}</code>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ USDT –Ω–∞ –Ω–∞—à –∞–¥—Ä–µ—Å: <code>{451452352436546526345}</code>
------------------------------------------------------------------------------------------------------
–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è –≠—Ç–æ –∞–¥—Ä–µ—Å USDT –≤ —Å–µ—Ç–∏ TRC20‚ùóÔ∏è‚ùóÔ∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã‚ùóÔ∏è‚ùóÔ∏è

–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ USDT [<code>{sell_rate}</code>]


–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –ü–ª–∞—Ç—ë–∂–∞!
‚ùóÔ∏è–í —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –î–∞—Ç–∞ –∏ –í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!
""",parse_mode="HTML")


@dp.message(Sellusdts.screensell, F.photo)
async def getmbanknumsell(message: Message, state: FSMContext):
    data1 = load_data()
    buy_rate = data1['BUY_RATE']
    sell_rate = data1['SELL_RATE']
    screenidsell = message.photo[-1].file_id
    data = await state.get_data()
    await state.clear()
    await message.answer(f"""‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!
üÜî–í–∞—à –Ω–æ–º–µ—Ä –ú–ë–ê–ù–ö–∞: <code><u>{data["mbanknum"]}</u></code> 

‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 10 –º–∏–Ω—É—Ç.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ!

‚úÖ–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã üëá
üë®‚Äçüíª–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @P2P_succsess
""",parse_mode="HTML")
    await bot.send_photo(
    chat_id=group_id, 
    photo=screenidsell, 
    caption=f"""<b>üÜî–ù–æ–º–µ—Ä –ú–ë–ê–ù–ö–ê –ø—Ä–æ–¥–∞–≤—Ü–∞üÜî</b> - <code>{data['mbanknum']}</code>""",parse_mode="HTML",
    message_thread_id=None 
)
    
    #await bot.send_photo(group_id , screenidsell ,None , f"""<b>üÜî–ù–æ–º–µ—Ä –ú–ë–ê–ù–ö–ê –ø—Ä–æ–¥–∞–≤—Ü–∞üÜî</b> - <code>{data['mbanknum']}</code>""",parse_mode="HTML")
    
    


    

#–ü–æ–º–æ—â—å –∏ –ú–µ–Ω—é—à–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ 
#–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –ø–æ—Å–ª–µ –º–µ–Ω—é
@dp.message(F.text.lower() == "–º–µ–Ω—é")
async def putonmenu(message: Message):
    await message.answer("<i><b>–ú–µ–Ω—é</b></i>",reply_markup=buttons.magaz_kb,parse_mode="HTML")
#–µ—Å–ª–∏ —Å–ª–æ–≤–æ –ø–æ–º–æ—â—å —Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ–º–æ—â—å 
@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def sendhelp(message: Message):
    await message.answer(f"<code>–ó–¥—Ä–∞–≤—Å–≤—Ç—É–π {message.from_user.first_name} !\n–Ø –±–æ—Ç –∫—Ä–∏–ø—Ç–æ–æ–±–º–µ–Ω–Ω–∏–∫ , –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Å—è –∫ —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É</code>  @P2P_succsess ",parse_mode="HTML")
#–ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç 
@dp.message(F.text)
async def anyothertext(message: Message):
    await message.delete()
    #await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ <code><b>–ü–æ–º–æ—â—å</b></code> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ª—É—á—à–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üëç",parse_mode="HTML")




async def main() -> None:
    
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
    
# –ò–Ω–æ–≥–¥–∞ –∫–ª–∞—Å—Å–Ω–æ —Å–∏–¥–µ—Ç—å –∏ –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ —Å–≤–æ–µ–π –∫–ª–∞—Å—Å–Ω–æ–π –∫–ª–∞–≤–µ , —Ç–∞–∫ –∫–∞–∫ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–∞–ª—å—Ü–∞–º –∏ –∑–≤—É–∫ —Ç–æ–∂–µ –ø—Ä—è—Ç–µ–Ω. –•–æ—Ç–µ–ª–æ—Å—å –±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∫–∞–∫ —Ç–æ –ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥–∏ –Ω–æ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á—Ç–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–Ω–æ–≥–æ –∫–Ω–≥–∏ —á—Ç–æ–±—ã –Ω–∞—á—É–∏—Ç—å—Å—è –∏—Ö –ø–∏—Å–∞—Ç—å . –í –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ö–æ—á–µ—Ç—Å—è —á—Ç–æ–±—ã –≤—Å–µ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ —É –º–µ–Ω—è –∏ —É –º–æ–µ–π —Å–µ–º—å–∏ –¥–∞ –∏ –≤—Å–µ.  
